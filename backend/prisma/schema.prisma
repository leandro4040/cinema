generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  password        String    // Adicionamos o campo de senha
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  reviews         Review[]
  recommendations Lists[]
  accounts        Account[]
  sessions        Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum MediaType {
  MOVIE
  SERIES
}

model Media {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  releaseDate DateTime
  posterUrl   String
  mediaType   MediaType
  genres      String[]

  reviews Review[]
  lists   ListItem[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaId   Int
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model Lists {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       ListItem[]
}

model ListItem {
  id      String   @id @default(cuid())
  addedAt DateTime @default(now())
  listId  String
  list    Lists    @relation(fields: [listId], references: [id], onDelete: Cascade)
  mediaId Int
  media   Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([listId, mediaId])
}